When would you want to use a remote repository rather than keeping all your work local?

  Especially when working from different computer remote repository would be greatly useful.
  And then the changes can be easily translated back to the local repository.  

Why might you want to always pull changes manually rather than having Git automatically stay 
up-to-date with your remote repository?

  Pulling chnages manually enables the programmers to sync both the local and reomte repository 
  only when thwy would want. Its gives more flexibilty to the users. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

  Branches are used to make another version of the master on the local machine. 
  Branches can be used mainly for making an experimental version or for trying out a
  new feature.

  Clones refers to copying the files from the remote to the local machine. 
  or making another copy on the local machine itself. 

  Forks are used to make a copy of the files on the remote (i.e. GitHub) itself; 
  without the need of cloning on to the local machine  and then pushing the changes. 
  Fork aslo provides proper reference to the original user of the files.   
 
What is the benefit of having a copy of the last known state of the remote stored locally?

  Keeping track of the last known state of the remote stored locally enables to add the changes
  that are made remotely. 
  Suppose the user goes offline and makes changes locally; having a copy of the last known state
  of the remote stored locally makes it possible for the user to merge the changes made locally
  and the changes made remotely when the user get back online. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

  Apart from Git or GitHub other Version Control software can be used such as Dropbox or Google Drive.
  These softwares would also enable to collaborate on a project.

  It would not be easier as in Dropbox or Google Drive as there is no provision of finding out the
  commits/changes made or who made the changes. It would not be easy to find out the conflicts.
    
  The only benefit is that the programmer need not worry about synchronizing the changes made;
  it would be done automatically.  

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

  Working on a sepearte branch helps to make changes and experiment with it rather than affecting the master. 
  Then these changes could be "pull requested" to the remote so that others collaborating on the project can
  look into it and then merge into the master on the remote /  give suggestion and opinion about the changes. 



